<?phpclass EventHandler extends Object {		function fowardEvent(&$eventOptions,$params){		//var_dump($eventOptions);		$localOpt = array('independant','inherit','inheritExclude');		$defOpt = array(			'independant' => false,			'inherit' => false,			'inheritExclude' => array('name','all_types'),		);		$opt = array_merge($defOpt,$params);		$eventOpt = array_diff_key($opt,array_flip($localOpt));		if($opt['inherit']){			$inherit = array_diff_key($eventOptions,array_flip($opt['inheritExclude']));			$eventOpt = array_merge($inherit,$eventOpt);		}		$this->Event = ClassRegistry::init('Event');		if($opt['independant']){			//debug('independant');			return $this->Event->dispatchEventPhases($eventOpt);		}else{			//debug('subEvent');			$eventOptions['subEvent'][] = $eventOpt;			return true;		}		return false;	}			function clearEventCache_form(){		$modes = array('aco','aro');		$this->EventType = ClassRegistry::init('EventType');		$eventTypes = $this->EventType->generatetreelist();		return array(			'field'=>array('type'=>'text'),			'eventType'=>array('type'=>'select','options'=>$eventTypes),			'type'=>array('type'=>'select','options'=>$modes),		);	}	function clearEventCache(&$eventOptions,$params){		if(array_key_exists('field',$params)){			$defOpt = array(				'field' => null,				'eventType' => null,				'mode' => 'aco',			);			$opt = array_merge($defOpt,$params);			$validEvent = empty($opt['eventType']);			if(!$validEvent){				$this->EventType = ClassRegistry::init('EventType');				$allEventType = $this->EventType->getSupTypes($opt['eventType'],false);				//debug($allEventType);				$validEvent = in_array($eventOptions['bindedEvent']['Event']['event_type_id'],array_keys($allEventType));			}			if($validEvent){				$this->Node = ClassRegistry::init('Node');				$ref = $this->Node->getItemRef($eventOptions['bindedEvent']['Event'][$opt['mode'].'_id']);				//debug($ref);				$model = ClassRegistry::init($ref['model']);				$conditions = array();				if(!empty($ref['foreign_key'])){					$conditions[$model->alias.'.'.$model->primaryKey] = $ref['foreign_key'];				}				$model->updateAll(array($opt['field']=>null),$conditions);				return $model->getAffectedRows();			}		}		return false;	}		function invalidated_form(){		$modes = array('aco'=>'Aco','aro'=>'Aro');		return array(			array(				'type'=>'element',				'val'=>'invalidated_form',				'options'=>array(					'modes' => $modes,				)			),		);	}		function invalidated_log($data,$params){		if($data['final_data']['phase'] != 1 && !empty($data['id'])){			$defOpt = array(				'mode' => 'aro',				'output_define' => array(),			);			$opt = array_merge($defOpt,$params);						$this->TimedEvent = ClassRegistry::init('TimedEvent');						if(!empty($opt['output_define'])) {				$data['output_define'] = $opt['output_define'];			}						//todo : find first time event			$timedEvent = $data;			if(!array_key_exists($opt['mode'].'_id',$timedEvent)){				$timedEvent = $this->TimedEvent->find('first',array('conditions'=>array($this->TimedEvent->alias.'.id'=>$data['id']),'recursive'=>-1));				$timedEvent = $timedEvent['TimedEvent'];			}			$linkedTo = $timedEvent[$opt['mode'].'_id'];						$eventNode = array('model'=>'TimedEvent','foreign_key'=>$data['id']);			$this->NodeLink = ClassRegistry::init('NodeLink');			$nodeLink = $this->NodeLink->link('invalidation', $linkedTo, $eventNode, $opt = array('context'=> 'Event invalidation'));			//debug($nodeLink);		}		return $data;	}	}